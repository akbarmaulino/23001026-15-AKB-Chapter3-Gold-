{
	"info": {
		"_postman_id": "db19d565-df86-414b-8215-ab2e8de06f60",
		"name": "Challenge Gold",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22413622",
		"_collection_link": "https://www.postman.com/winter-zodiac-867140/workspace/qae15-yantrisnandra-akbar-maulino/collection/22413622-db19d565-df86-414b-8215-ab2e8de06f60?action=share&source=collection_link&creator=22413622"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Registration",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random name\r",
									"function generateRandomName() {\r",
									"    const firstNames = [\"John\", \"Alice\", \"Bob\", \"Emma\", \"David\",\"Jhony\"]; // Add more first names as needed\r",
									"    const lastNames = [\"Smith\", \"Johnson\", \"Doe\", \"Brown\", \"Wilson\"]; // Add more last names as needed\r",
									"    const randomFirstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									"    return `${randomFirstName} ${randomLastName}`;\r",
									"}\r",
									"const randomName = generateRandomName();\r",
									"// Store the random name in an environment variable\r",
									"pm.environment.set('random_name', randomName);\r",
									"\r",
									"\r",
									"// Generate a random email address\r",
									"function generateRandomEmail() {\r",
									"    const username = Math.random().toString(36).substring(2, 12); // Generate a random username\r",
									"    const domain = 'google.com'; // Replace 'example.com' with your desired domain\r",
									"    return `${username}@${domain}`;\r",
									"}\r",
									"const randomEmail = generateRandomEmail();\r",
									"// Store the random email in an environment variable\r",
									"pm.environment.set('random_email', randomEmail);\r",
									"\r",
									"pm.environment.set('Password', \"12345\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"Secondhand_Email\", jsonData.user.email);\r",
									"\r",
									"pm.environment.set(\"Secondhand_UserID\", jsonData.user.id);\r",
									"\r",
									"pm.environment.set(\"Secondhand_Password\", jsonData.session.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"user\": {\r\n    \"name\": \"{{random_name}}\",\r\n    \"email\": \"{{random_email}}\",\r\n    \"password\": \"{{Password}}\"\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{secondhand}}/users.json",
							"host": [
								"{{secondhand}}"
							],
							"path": [
								"users.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign In Success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"user\": {\r\n    \"email\": \"{{random_email}}\",\r\n    \"password\": \"{{Password}}\"\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{secondhand}}/users/sign_in.json",
							"host": [
								"{{secondhand}}"
							],
							"path": [
								"users",
								"sign_in.json"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Profile",
			"item": [
				{
					"name": "Update Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"Secondhand_PhoneNumber\", jsonData.user.phone_number);\r",
									"\r",
									"pm.environment.set(\"Secondhand_Address\", jsonData.user.address);\r",
									"\r",
									"pm.environment.set(\"Secondhand_Username\", jsonData.user.name);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomUsername() {\r",
									"    const firstUsernames = [\"John\", \"Alice\", \"Bob\", \"Emma\", \"David\",\"Jhony\"]; // Add more first names as needed\r",
									"    const lastUsernames = [\"81\", \"91\", \"101\", \"102\", \"103\"]; // Add more last names as needed\r",
									"    const randomFirstUsernames = firstUsernames[Math.floor(Math.random() * firstUsernames.length)];\r",
									"    const randomLastUsernames = lastUsernames[Math.floor(Math.random() * lastUsernames.length)];\r",
									"    return `${randomFirstUsernames}${randomLastUsernames}`;\r",
									"}\r",
									"const ransomUsername = generateRandomUsername();\r",
									"// Store the random name in an environment variable\r",
									"pm.environment.set('random_Username', ransomUsername);\r",
									"\r",
									"\r",
									"// Generate a random-looking Indonesian phone number\r",
									"function generateRandomIndonesianPhoneNumber() {\r",
									"    const prefixOptions = [\"0811\", \"0812\", \"0813\", \"0821\", \"0822\", \"0823\", \"0851\", \"0852\", \"0853\", \"0814\", \"0815\", \"0816\", \"0855\"];\r",
									"    const selectedPrefix = prefixOptions[Math.floor(Math.random() * prefixOptions.length)];\r",
									"    const remainingDigits = Math.floor(Math.random() * 1000000000).toString().padStart(9, '0');\r",
									"    return selectedPrefix + remainingDigits;\r",
									"}\r",
									"const randomIndonesianPhoneNumber = generateRandomIndonesianPhoneNumber();\r",
									"// Store the random Indonesian phone number in an environment variable\r",
									"pm.environment.set('random_indonesian_phone_number', randomIndonesianPhoneNumber);\r",
									"\r",
									"// Generate a random-looking Indonesian address\r",
									"function generateRandomIndonesianAddress() {\r",
									"    const streets = [\"Jalan Merdeka\", \"Jalan Pahlawan\", \"Jalan Raya\", \"Jalan Cendrawasih\", \"Jalan Budi Utomo\", \"Jalan Diponegoro\"];\r",
									"    const cities = [\"Jakarta\", \"Surabaya\", \"Bandung\", \"Yogyakarta\", \"Medan\", \"Semarang\"];\r",
									"    const provinces = [\"Jakarta\", \"East Java\", \"West Java\", \"Yogyakarta\", \"North Sumatra\", \"Central Java\"];\r",
									"    \r",
									"    const randomStreet = streets[Math.floor(Math.random() * streets.length)];\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									"    const randomProvince = provinces[Math.floor(Math.random() * provinces.length)];\r",
									"    \r",
									"    return `${randomStreet}, ${randomCity}, ${randomProvince}`;\r",
									"}\r",
									"const randomIndonesianAddress = generateRandomIndonesianAddress();\r",
									"// Store the random Indonesian address in an environment variable\r",
									"pm.environment.set('random_indonesian_address', randomIndonesianAddress);\r",
									"// Extract the city from the generated address\r",
									"const city = randomIndonesianAddress.split(', ')[1];\r",
									"// Store the extracted city in an environment variable\r",
									"pm.environment.set('random_indonesian_city', city);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "user[name]",
									"value": "{{random_Username}}",
									"description": "Username",
									"type": "text"
								},
								{
									"key": "user[phone_number]",
									"value": "{{random_indonesian_phone_number}}",
									"description": "Nomor Handphone",
									"type": "text"
								},
								{
									"key": "user[address]",
									"value": "{{random_indonesian_address}}",
									"description": "Alamat",
									"type": "text"
								},
								{
									"key": "user[city_id] ",
									"value": "{{random_indonesian_city}}",
									"description": "Kota",
									"type": "text"
								},
								{
									"key": "user[avatar]",
									"description": "Avatar",
									"type": "file",
									"src": "/C:/Users/ASUS/Downloads/1.png"
								}
							]
						},
						"url": {
							"raw": "{{secondhand}}/profiles.json",
							"host": [
								"{{secondhand}}"
							],
							"path": [
								"profiles.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{secondhand}}/profiles.json",
							"host": [
								"{{secondhand}}"
							],
							"path": [
								"profiles.json"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Categories",
			"item": [
				{
					"name": "List Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Hobi\");\r",
									"});\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.response.to.have.body({\"categories\":[{\"id\":1,\"name\":\"Hobi\",\"url\":\"https://secondhand.binaracademy.org/categories/1\"},{\"id\":2,\"name\":\"Kendaraan\",\"url\":\"https://secondhand.binaracademy.org/categories/2\"},{\"id\":3,\"name\":\"Baju\",\"url\":\"https://secondhand.binaracademy.org/categories/3\"},{\"id\":4,\"name\":\"Elektronik\",\"url\":\"https://secondhand.binaracademy.org/categories/4\"},{\"id\":5,\"name\":\"Kesehatan\",\"url\":\"https://secondhand.binaracademy.org/categories/5\"}]});\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{secondhand}}/categories.json",
							"host": [
								"{{secondhand}}"
							],
							"path": [
								"categories.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Kesehatan\");\r",
									"});\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.response.to.have.body({\"category\":{\"id\":5,\"name\":\"Kesehatan\",\"url\":\"https://secondhand.binaracademy.org/categories/5\"}});\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{secondhand}}/categories/5.json",
							"host": [
								"{{secondhand}}"
							],
							"path": [
								"categories",
								"5.json"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Product",
			"item": [
				{
					"name": "Create Pdoduct",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"Secondhand_idBarang\", jsonData.product.id);\r",
									"\r",
									"pm.environment.set(\"Secondhand_namaBarang\", jsonData.product.name);\r",
									"\r",
									"pm.environment.set(\"Secondhand_CategoryBarang\", jsonData.product.category_id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Define an array of random IT computer product names\r",
									"const computerProductNames = [\r",
									"    \"Laptop\", \"Desktop Computer\", \"Monitor\", \"Keyboard\", \"Mouse\", \"Router\", \"External Hard Drive\",\r",
									"    \"Webcam\", \"Printer\", \"Scanner\", \"Graphics Card\", \"Motherboard\", \"CPU\", \"RAM\", \"SSD\",\r",
									"    \"Software License\", \"Tablet\", \"Server\", \"UPS\", \"Network Switch\"\r",
									"];\r",
									"// Generate a random IT computer product name\r",
									"function generateRandomComputerProductName() {\r",
									"    const randomIndex = Math.floor(Math.random() * computerProductNames.length);\r",
									"    return computerProductNames[randomIndex];\r",
									"}\r",
									"const randomComputerProductName = generateRandomComputerProductName();\r",
									"// Store the random computer product name in an environment variable\r",
									"pm.environment.set('random_computer_product_name', randomComputerProductName);\r",
									"\r",
									"// Define an array of random product descriptions\r",
									"const productDescriptions = [\r",
									"    \"High-performance and reliable\",\r",
									"    \"Sleek and modern design\",\r",
									"    \"Built to last with top-quality materials\",\r",
									"    \"Versatile and easy to use\",\r",
									"    \"Cutting-edge technology for superior performance\",\r",
									"    \"Ergonomically designed for comfort\",\r",
									"    \"Enhance your productivity with this product\",\r",
									"    \"Experience the future of technology\",\r",
									"    \"Affordable and feature-packed\",\r",
									"    \"Innovative and stylish\",\r",
									"    \"Ideal for both personal and professional use\",\r",
									"    \"Eco-friendly and energy-efficient\",\r",
									"    \"Seamless connectivity and compatibility\",\r",
									"    \"Get the job done with ease\",\r",
									"    \"Upgrade your setup with this exceptional product\",\r",
									"    \"Stay ahead with the latest in tech\",\r",
									"];\r",
									"\r",
									"// Generate a random product description\r",
									"function generateRandomProductDescription() {\r",
									"    const randomIndex = Math.floor(Math.random() * productDescriptions.length);\r",
									"    return productDescriptions[randomIndex];\r",
									"}\r",
									"const randomProductDescription = generateRandomProductDescription();\r",
									"// Store the random product description in an environment variable\r",
									"pm.environment.set('random_product_description', randomProductDescription);\r",
									"\r",
									"// Generate a random product price\r",
									"function generateRandomProductPrice(min, max, decimalPlaces) {\r",
									"    const price = (Math.random() * (max - min) + min).toFixed(decimalPlaces);\r",
									"    return parseFloat(price).toFixed(decimalPlaces);\r",
									"}\r",
									"const minPrice = 100000.00; // Define the minimum price\r",
									"const maxPrice = 5000000.00; // Define the maximum price\r",
									"const decimalPlaces = 0; // Define the number of decimal places\r",
									"const randomProductPrice = generateRandomProductPrice(minPrice, maxPrice, decimalPlaces);\r",
									"// Store the random product price in an environment variable\r",
									"pm.environment.set('random_product_price', randomProductPrice);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "product[name]",
									"value": "{{random_computer_product_name}}",
									"description": "Nama Barang",
									"type": "text"
								},
								{
									"key": "product[price]",
									"value": "{{random_product_price}}",
									"description": "Harga Barang",
									"type": "text"
								},
								{
									"key": "product[description]",
									"value": "{{random_product_description}}",
									"description": "Deskripsi Barang",
									"type": "text"
								},
								{
									"key": "product[status]",
									"value": "published",
									"description": "Status",
									"type": "text"
								},
								{
									"key": "product[category_id]",
									"value": "1",
									"description": "Kategori",
									"type": "text"
								},
								{
									"key": "product[images][]",
									"description": "Gambar",
									"type": "file",
									"src": "/C:/Users/ASUS/Downloads/1.png"
								}
							]
						},
						"url": {
							"raw": "{{secondhand}}/products.json",
							"host": [
								"{{secondhand}}"
							],
							"path": [
								"products.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "page",
									"value": "1",
									"type": "text"
								},
								{
									"key": "category_id",
									"value": "{{Secondhand_CategoryBarang}}",
									"type": "text"
								},
								{
									"key": "user_id",
									"value": "{{Secondhand_UserID}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{secondhand}}/products.json",
							"host": [
								"{{secondhand}}"
							],
							"path": [
								"products.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{secondhand}}/products/{{Secondhand_idBarang}}.json",
							"host": [
								"{{secondhand}}"
							],
							"path": [
								"products",
								"{{Secondhand_idBarang}}.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"Secondhand_idBarang\", jsonData.product.id);\r",
									"\r",
									"pm.environment.set(\"Secondhand_namaBarang\", jsonData.product.name);\r",
									"\r",
									"pm.environment.set(\"Secondhand_CategoryBarang\", jsonData.product.category_id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Define an array of random IT computer product names\r",
									"const computerProductNames = [\r",
									"    \"Laptop\", \"Desktop Computer\", \"Monitor\", \"Keyboard\", \"Mouse\", \"Router\", \"External Hard Drive\",\r",
									"    \"Webcam\", \"Printer\", \"Scanner\", \"Graphics Card\", \"Motherboard\", \"CPU\", \"RAM\", \"SSD\",\r",
									"    \"Software License\", \"Tablet\", \"Server\", \"UPS\", \"Network Switch\"\r",
									"];\r",
									"// Generate a random IT computer product name\r",
									"function generateRandomComputerProductName() {\r",
									"    const randomIndex = Math.floor(Math.random() * computerProductNames.length);\r",
									"    return computerProductNames[randomIndex];\r",
									"}\r",
									"const randomComputerProductName = generateRandomComputerProductName();\r",
									"// Store the random computer product name in an environment variable\r",
									"pm.environment.set('random_computer_product_name', randomComputerProductName);\r",
									"\r",
									"// Define an array of random product descriptions\r",
									"const productDescriptions = [\r",
									"    \"High-performance and reliable\",\r",
									"    \"Sleek and modern design\",\r",
									"    \"Built to last with top-quality materials\",\r",
									"    \"Versatile and easy to use\",\r",
									"    \"Cutting-edge technology for superior performance\",\r",
									"    \"Ergonomically designed for comfort\",\r",
									"    \"Enhance your productivity with this product\",\r",
									"    \"Experience the future of technology\",\r",
									"    \"Affordable and feature-packed\",\r",
									"    \"Innovative and stylish\",\r",
									"    \"Ideal for both personal and professional use\",\r",
									"    \"Eco-friendly and energy-efficient\",\r",
									"    \"Seamless connectivity and compatibility\",\r",
									"    \"Get the job done with ease\",\r",
									"    \"Upgrade your setup with this exceptional product\",\r",
									"    \"Stay ahead with the latest in tech\",\r",
									"];\r",
									"\r",
									"// Generate a random product description\r",
									"function generateRandomProductDescription() {\r",
									"    const randomIndex = Math.floor(Math.random() * productDescriptions.length);\r",
									"    return productDescriptions[randomIndex];\r",
									"}\r",
									"const randomProductDescription = generateRandomProductDescription();\r",
									"// Store the random product description in an environment variable\r",
									"pm.environment.set('random_product_description', randomProductDescription);\r",
									"\r",
									"// Generate a random product price\r",
									"function generateRandomProductPrice(min, max, decimalPlaces) {\r",
									"    const price = (Math.random() * (max - min) + min).toFixed(decimalPlaces);\r",
									"    return parseFloat(price).toFixed(decimalPlaces);\r",
									"}\r",
									"const minPrice = 100000.00; // Define the minimum price\r",
									"const maxPrice = 5000000.00; // Define the maximum price\r",
									"const decimalPlaces = 0; // Define the number of decimal places\r",
									"const randomProductPrice = generateRandomProductPrice(minPrice, maxPrice, decimalPlaces);\r",
									"// Store the random product price in an environment variable\r",
									"pm.environment.set('random_product_price', randomProductPrice);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "product[name]",
									"value": "{{random_computer_product_name}}",
									"type": "text"
								},
								{
									"key": "product[price]",
									"value": "{{random_product_price}}",
									"type": "text"
								},
								{
									"key": "product[description]",
									"value": "{{random_product_description}}",
									"type": "text"
								},
								{
									"key": "product[status]",
									"value": "published",
									"type": "text"
								},
								{
									"key": "product[category_id]",
									"value": "1",
									"type": "text"
								},
								{
									"key": "product[images][]",
									"type": "file",
									"src": "/C:/Users/ASUS/Downloads/1.png"
								},
								{
									"key": "product[persisted_images][]",
									"type": "file",
									"src": "/C:/Users/ASUS/Downloads/1.png"
								}
							]
						},
						"url": {
							"raw": "{{secondhand}}/products/{{Secondhand_idBarang}}.json",
							"host": [
								"{{secondhand}}"
							],
							"path": [
								"products",
								"{{Secondhand_idBarang}}.json"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Offers",
			"item": [
				{
					"name": "List Offers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.response.to.have.body({\"meta\":{\"page_next\":null,\"page_previous\":null,\"page_size\":10,\"page_count\":1,\"total\":0},\"offers\":[]});\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{secondhand}}/users/{{Secondhand_UserID}}/offers.json",
							"host": [
								"{{secondhand}}"
							],
							"path": [
								"users",
								"{{Secondhand_UserID}}",
								"offers.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Offer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"offer\": {\r\n    \"status\": \"initiated\"\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{secondhand}}/offers/1.json",
							"host": [
								"{{secondhand}}"
							],
							"path": [
								"offers",
								"1.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Offers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"offer\": {\r\n    \"price\": 1000,\r\n    \"to_id\": 1,\r\n    \"product_id\": {{Secondhand_idBarang}}\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{secondhand}}/offers.json",
							"host": [
								"{{secondhand}}"
							],
							"path": [
								"offers.json"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Deleted Product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{secondhand}}/products/{{Secondhand_idBarang}}.json",
					"host": [
						"{{secondhand}}"
					],
					"path": [
						"products",
						"{{Secondhand_idBarang}}.json"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}